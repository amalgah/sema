
import { PubSub } from "../utils/pubSub.js";
import { audioEngineStatus } from "../stores/common.js";
/**
 * The Controller is a singleton class that encapsulates signal engine (sema-engine)
 * and implements the dependency inversion principle
 * @class AudioEngine
 */
export default class Controller {
	/**
	 * @constructor
	 */
	constructor(engine) {
		if (Controller.instance) {
			return Controller.instance // Singleton pattern, only one instance in sema
		}
		Controller.instance = this;

		// Constructor dependency injection of a sema-engine singleton instance
		this.engine = engine;

		this.samplesLoaded = false;



		// this.messaging = new PubSub();

		// this.messaging.subscribe("eval-dsp", async (e) => {
		// 	this.engine.eval(e); // Also resumes engine playback if paused
		// });

		// this.messaging.subscribe("stop-audio", (e) => this.engine.stop());

		// this.messaging.subscribe("load-sample", (name, url) =>
		// 	this.engine.loadSample(name, url)
		// );

		// this.messaging.subscribe("add-engine-analyser", (e) =>
		// 	this.engine.createAnalyser(e.id, (data) =>
		// 		this.messaging.publish(`${e.id}-analyser-data`, data)
		// 	)
		// );

		// this.messaging.subscribe("remove-engine-analyser", (e) =>
		// 	this.engine.removeAnalyser(e)
		// );

		// this.messaging.subscribe("model-output-data", (e) =>
		// 	this.engine.postAsyncMessageToProcessor(e)
		// );
		// this.messaging.subscribe("clock-phase", (e) =>
		// 	this.engine.postAsyncMessageToProcessor(e)
		// );
		// this.messaging.subscribe("model-send-buffer", (e) =>
		// 	this.engine.postAsyncMessageToProcessor(e)
		// );

		// this.messaging.subscribe("mouse-xy", (e) => {
		// 	this.engine.pushToSharedArrayBuffer("mxy", e);
		// });

		// this.messaging.subscribe("osc", (e) =>
		// 	console.log(`DEBUG:AudioEngine:OSC: ${e}`)
		// );

		//the message has incoming data from other peers
		// this.messaging.subscribe("peermsg", (e) => {
		//   e.ttype = 'NET';
		//   e.peermsg = 1;
		//   this.onMessagingEventHandler(e);
		// });

		// this.messaging.subscribe("peerinfo-request", (e) => {
		// 	console.log(this.peerNet.peerID);
		// 	copyToPasteBuffer(this.peerNet.peerID);
		// });
	}

	/**
	 * Handler of the Pub/Sub message events
	 * whose topics are subscribed to in the audio engine constructor
	 * @onMessagingEventHandler
	 */
	onMessagingEventHandler(event) {
		if (event !== undefined) {
			// Receive notification from "model-output-data" topic
			console.log('DEBUG:AudioEngine:onMessagingEventHandler:')
			console.log(event)
			this.audioWorkletNode.port.postMessage(event)
		}
	}

	/**
	 * Handler of audio worklet processor events
	 * @onProcessorAsyncMessageHandler
	 * @param event
	 */
	onProcessorAsyncMessage(event) {
		if (event !== undefined && event.data !== undefined) {
			// console.log('DEBUG:AudioEngine:processorMessageHandler:');
			// console.log(event);
			// if (event.data.rq !== undefined && event.data.rq === "send") {
			// 	switch (event.data.ttype) {
			// 		case "ML":
			// 			// Stream generated by 'toJS' live code instruction — e.g. {10,0,{1}sin}toJS;
			// 			// publishes to model/JS editor, which posts to ml.worker
			// 			this.messaging.publish("model-input-data", {
			// 				type: "model-input-data",
			// 				value: event.data.value,
			// 				ch: event.data.ch,
			// 			});
			// 			break;
			// 		case "NET":
			// 			this.peerNet.send(
			// 				event.data.ch[0],
			// 				event.data.value,
			// 				event.data.ch[1]
			// 			);
			// 			break;
			// 	}
			// }
			//  else if (event.data.rq && event.data.rq === "buf") {
			// 	console.log("buf", event.data);
			// 	switch (event.data.ttype) {
			// 		case "ML":
			// 			this.messaging.publish("model-input-buffer", {
			// 				type: "model-input-buffer",
			// 				value: event.data.value,
			// 				channelID: event.data.channelID, //channel ID
			// 				blocksize: event.data.blocksize,
			// 			});
			// 			break;
			// 	}
			// }
			// else if (event.data.phase !== undefined) {
			// console.log('DEBUG:AudioEngine:phase:');
			// console.log(event.data.phase);
			// this.kuraClock.broadcastPhase(event.data.phase); // TODO Refactor p to phase
			// }
			// else if (event.data.rq != undefined && event.data.rq === 'receive') {
			//   switch (event.data.ttype) {
			//     case 'ML':
			//       // Stream generated by 'fromJS' live code instruction – e.g. {{10,1}fromJS}saw
			//       // publishes to model/JS editor, which posts to ml.worker
			//       this.messaging.publish('model-output-data-request', {
			//         type: 'model-output-data-request',
			//         value: event.data.value,
			//         channel: event.data.ch
			//       });
			//       break;
			//     case 'NET':
			//       break;
			//   }
			// }
		}
	}

	/**
	 * Initialises audio context and sets worklet processor code
	 * @init
	 * @param audioworletURL
	 * TODO removing numClockPeers, should be added to a specialised function
	 */
	async init(audioWorkletURL) {
		if (this.engine !== undefined) {
			try {
				await this.engine.init(audioWorkletURL)

				// Subscribe async messages from the Audio Worklet Processor scope
				this.engine.subscribeAsyncMessage(this.onProcessorAsyncMessage)

				// Connect Analysers loaded from the store need to pass callbacks after they load
				this.engine.connectAnalysers()

				const channelId = 'mxy',
					ttype = 'mouseXY',
					blockSize = 2

				// Create SharedArrayBuffer for mouse data
				this.engine.createSharedBuffer(channelId, ttype, blockSize)

				// this.engine.play()

				// Lazy load all samples imported from assets
				// this.loadImportedSamples(); // DO NOT DELETE, read comments on function signature
				await this.importSamples();

        audioEngineStatus.set('running');

			} catch (error) {
				console.error('Error initialising engine', error)
			}
		}
	}

	onAudioInputFail(error) {
		console.error(
			`Engine Controller: AudioInputFail – ${error.message} ${error.name}`
		)
	}

	/**
	 * Sets up an AudioIn WAAPI sub-graph
	 * @connectMediaStreamSourceInput
	 */
	async connectMediaStream() {
		const constraints = (window.constraints = {
			audio: true,
			video: false,
		})

		navigator.mediaDevices
			.getUserMedia(constraints)
			.then((s) => this.onAudioInputInit(s))
			.catch(this.onAudioInputFail)
	}

	/**
	 * ! Deprecated until I have time to make a Rollup plugin
	 * @returns list of all imports from a folder specified by context
	 */
	getSamplesNames() {
		const r = require.context('../../assets/samples', false, /\.wav$/)

		// return an array list of filenames (with extension)
		const importAll = (r) => r.keys().map((file) => file.match(/[^\/]+$/)[0])

		return importAll(r)
	}

	/**
	 * ! Deprecated until I have time to make a Rollup plugin
	 * @returns list of all imports from a folder specified by context
	 */
	lazyLoadSample(sampleName) {
		// import(`../../static/samples/909.wav`) // need to use the samples relative path to the src, not in public,
		// import(path) // doesn't work either
		import(`../../static/samples/${sampleName}.wav`) // ORIGINAL IMPL, DOESNT WORK can't use dynamic import variable
			.then((e) => {
				this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				// this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)
  }

  /**
   * ! Deprecated until I have time to make a Rollup plugin
   * @returns list of all imports from a folder specified by context
   */
	loadImportedSamples() {
		this.getSamplesNames().forEach((sampleName) =>
			this.lazyLoadSample(sampleName)
		)

		this.samplesLoaded = true
	}

	/**
	 * ! This hack is required to load the sema audio sample set
	 * ! it will be deprecated once I have time to make a Rollup plugin
	 * @returns list of all imports from a folder specified by context
	 */
	importSamples() {

		import(`../../static/samples/909.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/909b.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/909closed.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/909open.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/CARinsect.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/Cryptotympana.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/Dundunia.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/InsectBee.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/InsectBee2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/InsectFly.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/InsecticideZG.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/Macrosemia.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/MacrosemiaTonk.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/MeimunaNau.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/auboom.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/auboom2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/auclick.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/audoubelclick2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/audoubleclick.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/auhiclick.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/ausiclick.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/backswing-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/bee.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/bello.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/bellrip.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/bellrip2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/bellrip3.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/birta.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/blade-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/boom.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/boom2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/boomwag.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/camclick-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/camina1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/camina2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/camina3.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/camina4.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/chain.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/chainSpade.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/click-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/click.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/clicko-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/clicko.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/clicks1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/convol1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/convol2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/convol3.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/convol4.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/convol5.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/crackle3.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/crickBee.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/dalispark.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/dentist-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/digaa.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/dorje.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/drone1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/drone2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/drr.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/electro.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/elstatic-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/firecrack.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/firespark.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/firespark2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/flash-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/glitch-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/hapsi.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/harshi-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/harshlow-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/heart.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/holeMONO.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/ice.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/insec.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/insec2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/insec3.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/insectzapZG.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/iron.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/ironrip.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/jump.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/kernel.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/kernel2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/kerneldrone.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/kernelmix.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/kicic.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/kicic2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/kicicboom.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/knock.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/laekur.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/lookout.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/machine.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/magnetclock-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/noinoi.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/noise-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/noise1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/noise2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/paper.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/pattern10.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/pattern11.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/pattern8.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/pattern9.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/patterndrone.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/patterndrone2.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/patterndrone3.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/phoo-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/pork.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/rain_ravi.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/ravi.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/revbell.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/rocks.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/rotatingIron.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/sbq.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/skake2Ed.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/snork.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/snow.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/spade.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/spark.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/stretch.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/sweetmachine-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/swipe-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/triplet.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/vindva.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/vindvabd.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/vindvaclick.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/vindvadbase.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/vindvahat.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/viromachine-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/woodsamp.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/wooo-old1.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/xylophone.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/zhish.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)

		import(`../../static/samples/zzzz.wav`) // need to use the samples relative path to the src, not in public,
			.then((e) => {
				// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
				this.engine.loadSample(e.default, `/samples/${e.default}`)

        this.samplesLoaded = true;
			})
			.catch((err) =>
				console.error(`Engine lazy loading sample: ${sampleName}` + err)
			)
	}

  async importSamplesAsync() {
    // Need to chain promises


		// import(`../../static/samples/909.wav`) // need to use the samples relative path to the src, not to /public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
    //   then(import(`../../static/samples/909b.wav`)
		// 	.then((e) => {
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.then(import(`../../static/samples/909closed.wav`)
		// 	.then((e) => {
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	}))
		// 	.then(import(`../../static/samples/909open.wav`)
		// 	.then((e) => {
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	}))
		// 	.then(import(`../../static/samples/CARinsect.wav`)
		// 	.then((e) => {
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	}))
		// 	.then(import(`../../static/samples/Cryptotympana.wav`)
		// 	.then((e) => {
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	}))
		// 	.then(import(`../../static/samples/Dundunia.wav`)
    //   .then((e) => {
    //     this.engine.loadSample(e.default, `/samples/${e.default}`)
    //     this.samplesLoaded = true;
    //   }))
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/InsectBee.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/InsectBee2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/InsectFly.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/InsecticideZG.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/Macrosemia.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/MacrosemiaTonk.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/MeimunaNau.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/auboom.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/auboom2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/auclick.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/audoubelclick2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/audoubleclick.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/auhiclick.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/ausiclick.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/backswing-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/bee.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/bello.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/bellrip.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/bellrip2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/bellrip3.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/birta.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/blade-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/boom.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/boom2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/boomwag.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/camclick-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/camina1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/camina2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/camina3.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/camina4.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/chain.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/chainSpade.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/click-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/click.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/clicko-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/clicko.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/clicks1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/convol1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/convol2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/convol3.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/convol4.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/convol5.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/crackle3.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/crickBee.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/dalispark.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/dentist-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/digaa.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/dorje.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/drone1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/drone2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/drr.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/electro.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/elstatic-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/firecrack.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/firespark.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/firespark2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/flash-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/glitch-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/hapsi.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/harshi-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/harshlow-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/heart.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/holeMONO.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/ice.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/insec.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/insec2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/insec3.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/insectzapZG.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/iron.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/ironrip.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/jump.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/kernel.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/kernel2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/kerneldrone.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/kernelmix.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/kicic.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/kicic2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/kicicboom.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/knock.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/laekur.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/lookout.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/machine.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/magnetclock-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/noinoi.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/noise-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/noise1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/noise2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/paper.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/pattern10.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/pattern11.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/pattern8.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/pattern9.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/patterndrone.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/patterndrone2.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/patterndrone3.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/phoo-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/pork.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/rain_ravi.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/ravi.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/revbell.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/rocks.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/rotatingIron.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/sbq.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/skake2Ed.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/snork.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/snow.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/spade.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/spark.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/stretch.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/sweetmachine-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/swipe-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/triplet.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/vindva.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/vindvabd.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/vindvaclick.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/vindvadbase.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/vindvahat.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/viromachine-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/woodsamp.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/wooo-old1.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/xylophone.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/zhish.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)

		// import(`../../static/samples/zzzz.wav`) // need to use the samples relative path to the src, not in public,
		// 	.then((e) => {
		// 		// this.engine.loadSample(sampleName, `/samples/${sampleName}.wav`)
		// 		this.engine.loadSample(e.default, `/samples/${e.default}`)
		// 	})
		// 	.catch((err) =>
		// 		console.error(`Engine lazy loading sample: ${sampleName}` + err)
		// 	)
	}
}
